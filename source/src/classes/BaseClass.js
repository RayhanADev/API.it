import { lightfetch } from 'lightfetch-node';
import { gqlQueryCreator as queryCreator } from '../utils/modules/gql-query-creator/index.js';

import { appendFileSync } from 'fs';

import headers from '../utils/headers.js';
import constants from '../utils/constants.js';

String.prototype.padLeft = function (length, character) {
	return new Array(length - this.length + 1).join(character || ' ') + this;
};

Date.prototype.toFormattedString = function () {
	return (
		[
			String(this.getMonth() + 1).padLeft(2, '0'),
			String(this.getDate()).padLeft(2, '0'),
			String(this.getFullYear()).substr(2, 2),
		].join('/') +
		' ' +
		[
			String(this.getHours()).padLeft(2, '0'),
			String(this.getMinutes()).padLeft(2, '0'),
		].join(':')
	);
};

async function runGraphQL({ name, variables, items }, options = {}) {
	const body = queryCreator(name, variables, items);

	if (options.authRequired === true) {
		if (!global.cookies)
			throw new Error(
				'ReplAPI.it Error: You are not logged in! Please use the Login class to set your login.',
			);
		if (
			!['RayhanADev', 'ReplAPIit'].includes(constants.initVariables.username) ||
			!['RayhanADev', 'ReplAPIit'].includes(process.env.REPL_OWNER)
		)
			throw new Error(
				'ReplAPI.it Error: This user is not whitelisted. To gain access to the whitelist contact RayhanADev.',
			);
		headers.cookie = 'connect.sid=' + global.cookies;
		body.captcha = constants.initVariables.captcha.token;
		body.clientVersion = '7561851';
		body.format = 'pbuf';
		body.hCaptchaSiteKey = '473079ba-e99f-4e25-a635-e9b661c7dd3e';
	}

	const info = await lightfetch(constants.graphql, {
		body,
		headers,
		method: 'POST',
	});

	try {
		const data = info.toJSON();
		if (data.errors) {
			if (constants.initVariables.statsForNerds === true) {
				// prettier-disable
				const statsForNerds = `--- ReplAPI.it Stats for Nerds ---
This message was autogenerated on ${new Date().toFormattedString()}
Error Message: Replit GraphQL Errors
Additional Information:
Response: ${JSON.stringify(data)}
${body.query}
${body.variables}
`;
				appendFileSync('./replapi-it--debug.log', statsForNerds);
			}
		}
		return data;
	} catch (error) {
		if (constants.initVariables.statsForNerds === true) {
			// prettier-disable
			const statsForNerds = `--- ReplAPI.it Stats for Nerds ---
This message was autogenerated on ${new Date().toFormattedString()}
Error Message: ${error.message}
Additional Information:
${info.toText()}
`;
			appendFileSync('./replapi-it--debug.log', statsForNerds);
		}
		throw new Error(
			'ReplAPI.it Error: Could not parse response data. This is likely because of some Replit error, please open an issue on the main Repository to let us know!',
		);
	}
}

export default class BaseClass {
	async runGraphQL(data, options) {
		const info = await runGraphQL(data, options);

		if (info.errors) {
			if (constants.initVariables.statsForNerds === true) {
				// prettier-disable
				const statsForNerds = `--- ReplAPI.it Stats for Nerds ---
This message was autogenerated on ${new Date().toFormattedString()}
Error Message: Replit GraphQL Errors
Additional Information:
${JSON.stringify(info)}
`;
				appendFileSync('./replapi-it--debug.log', statsForNerds);
			}
			throw new Error(
				`\nReplit GraphQL Errors:${info.errors.map(
					(error) => `\n\t- ${error.message}`,
				)}\n`,
			);
		}
		return info;
	}
}
